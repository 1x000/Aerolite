package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.MotionEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.movement.Fly
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.concurrent.ConcurrentLinkedQueue

@ModuleInfo("VulcanHelper", ModuleCategory.EXPLOIT)
class VulcanHelper : Module() {
    private val mineland = BoolValue("Mineland", false)
    private val combat = BoolValue("ReachA", false)

    private val packetList2 = ConcurrentLinkedQueue<Packet<*>>()
    private val timer = MSTimer()
    private var enabled = 0

    override fun onDisable() {
        packetList2.clear()
        enabled = 0
    }

    override fun onEnable() {
        packetList2.clear()
    }

    fun onPacket(event: PacketEvent) {
        if (mc.isIntegratedServerRunning) return
        val p = event.packet
        if (mineland.get() && p is C03PacketPlayer && !mc.thePlayer.isSwingInProgress && !mc.thePlayer.isUsingItem && !p.isMoving
            && !LiquidBounce.moduleManager[Fly::class.java]!!.state) event.cancelEvent()
        if (combat.get() && p is C0FPacketConfirmTransaction) {
            packetList2.add(p)
            event.cancelEvent()
        }
    }

    fun onMotion(event: MotionEvent) {
        if (mc.isIntegratedServerRunning) return
        if (combat.get()) {
            if (timer.hasTimePassed((5000 + Math.random() * 1000).toLong())) {
                packetList2.forEach(PacketUtils::sendPacketNoEvent2)
                packetList2.clear()
                timer.reset()
            }
        }
    }
}