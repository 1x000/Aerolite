package net.ccbluex.liquidbounce.features.module.modules.addit

import net.ccbluex.liquidbounce.event.BlockBBEvent
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.block.BlockLilyPad
import net.minecraft.network.play.server.S0EPacketSpawnObject
import net.minecraft.network.play.server.S2BPacketChangeGameState
import net.minecraft.util.AxisAlignedBB


@ModuleInfo(name = "AntiExploit", category = ModuleCategory.ADDIT, array = false, defaultOn = true)
class AntiExploit : Module() {

    init {
        state = true
    }

    val guardianValue = BoolValue("LessGuardian", true)
    private val maxArrowSpawn = IntegerValue("MaxArrowPerSecond", 100, 1, 1000)
    private val fixLilyPadMotion = BoolValue("ViaLilyPadMotion", false)

    private var tick = 0
    private var arrowMax = 0
    private var guardianEffect = false


    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (packet is S2BPacketChangeGameState) {
            if (packet.gameState == 5 && !mc.isDemo) {
                event.cancelEvent()
            }
            if (packet.gameState == 10 && guardianValue.get()) {
                if (!guardianEffect)
                    guardianEffect = true
                else {
                    event.cancelEvent()
                }
            }
        }

        if (packet is S0EPacketSpawnObject && packet.type == 60) {
            arrowMax++
            if (arrowMax > maxArrowSpawn.get()) {
                event.cancelEvent()
            }
        }
    }

    @EventTarget
    fun onBlockBB(event: BlockBBEvent) {
        if (event.block is BlockLilyPad && fixLilyPadMotion.get()) {
            event.boundingBox = AxisAlignedBB(
                event.x.toDouble(), event.y.toDouble(), event.z.toDouble(),
                    event.x + 1.0, event.y + 0.09375, event.z + 1.0
                )
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        tick++
        if (tick >= 20) {
            tick = 0
            arrowMax = 0
            guardianEffect = false
        }
    }

}